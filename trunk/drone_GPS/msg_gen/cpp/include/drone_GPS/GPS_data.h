/* Auto-generated by genmsg_cpp for file /home/dell-077/fuerte_workspace/sandbox/drone_GPS/msg/GPS_data.msg */
#ifndef DRONE_GPS_MESSAGE_GPS_DATA_H
#define DRONE_GPS_MESSAGE_GPS_DATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace drone_GPS
{
template <class ContainerAllocator>
struct GPS_data_ {
  typedef GPS_data_<ContainerAllocator> Type;

  GPS_data_()
  : header()
  , longitude(0.0)
  , latitude(0.0)
  , elevation(0.0)
  , X(0.0)
  , Y(0.0)
  , time_zone(0)
  , altitude(0)
  , num_sattelites(0)
  {
  }

  GPS_data_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , longitude(0.0)
  , latitude(0.0)
  , elevation(0.0)
  , X(0.0)
  , Y(0.0)
  , time_zone(0)
  , altitude(0)
  , num_sattelites(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef double _longitude_type;
  double longitude;

  typedef double _latitude_type;
  double latitude;

  typedef double _elevation_type;
  double elevation;

  typedef double _X_type;
  double X;

  typedef double _Y_type;
  double Y;

  typedef int32_t _time_zone_type;
  int32_t time_zone;

  typedef int32_t _altitude_type;
  int32_t altitude;

  typedef uint8_t _num_sattelites_type;
  uint8_t num_sattelites;


  typedef boost::shared_ptr< ::drone_GPS::GPS_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_GPS::GPS_data_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GPS_data
typedef  ::drone_GPS::GPS_data_<std::allocator<void> > GPS_data;

typedef boost::shared_ptr< ::drone_GPS::GPS_data> GPS_dataPtr;
typedef boost::shared_ptr< ::drone_GPS::GPS_data const> GPS_dataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::drone_GPS::GPS_data_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::drone_GPS::GPS_data_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace drone_GPS

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::drone_GPS::GPS_data_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::drone_GPS::GPS_data_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::drone_GPS::GPS_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "66dd7373cf0e63f95829d59e518dc508";
  }

  static const char* value(const  ::drone_GPS::GPS_data_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x66dd7373cf0e63f9ULL;
  static const uint64_t static_value2 = 0x5829d59e518dc508ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_GPS::GPS_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "drone_GPS/GPS_data";
  }

  static const char* value(const  ::drone_GPS::GPS_data_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::drone_GPS::GPS_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# header\n\
Header      header\n\
# ----------------- Data GPS ----------------------------\n\
float64     longitude\n\
float64     latitude\n\
float64     elevation\n\
float64     X\n\
float64     Y\n\
int32     time_zone\n\
int32       altitude\n\
uint8 num_sattelites\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::drone_GPS::GPS_data_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::drone_GPS::GPS_data_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::drone_GPS::GPS_data_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::drone_GPS::GPS_data_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.longitude);
    stream.next(m.latitude);
    stream.next(m.elevation);
    stream.next(m.X);
    stream.next(m.Y);
    stream.next(m.time_zone);
    stream.next(m.altitude);
    stream.next(m.num_sattelites);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GPS_data_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_GPS::GPS_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::drone_GPS::GPS_data_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "elevation: ";
    Printer<double>::stream(s, indent + "  ", v.elevation);
    s << indent << "X: ";
    Printer<double>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<double>::stream(s, indent + "  ", v.Y);
    s << indent << "time_zone: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time_zone);
    s << indent << "altitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.altitude);
    s << indent << "num_sattelites: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_sattelites);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DRONE_GPS_MESSAGE_GPS_DATA_H

